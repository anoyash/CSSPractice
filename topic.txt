understanding css -- used for styling
understanding css file 
understanding linking 
CSS boilerplate
understanding css writing way 

    order of specificity in CSS
    Inline Styling --> ID styling --> CLASS styling --> Tag styling */

understanding width, height 
understanding units, px and % 
    
    px are fixed value of units
    % is relative to the space in which it exits 

understanding margin padding

    margin  : space between two elements, this applies outside of the element
    padding : space along the boundry, created inside the element. 

understanding background image and things related to it
understanding position absolute and relative

        1. Absolute : as soon as we make the position absolute it comes above in 3-D spatial.
        2. If multiple elements are in sequence and we do position absolute , it will come in layer 1 , layer 2 and layer 3
           where layer 1 belongs to element 1 and so on.
           so, height of layer 3 > layer 2 > layer 1
        3. Jiske element ke andar rakhna hai, make the element CSS property position : relative 
           and jisko andar rakhna hai , make that elements CSS property position : absolute

        4. Elements are then positioned using the top, bottom, left, and right properties. 
           However, these properties will not work unless the position property is set first.
           They also work differently depending on the position value.

        5. Types of position : fixed , relative , absolute , sticky , static     

understanding flexbox

    1. If we want to work along the width , use : justify-content
    2. If we want to work along the height , use : align-items

    3. By default elements displayed in one after another in downward direction.

    4. If we set the CSS propery display : flex . Then the children displayed inside the element displayed in 
    the horizontal manner



/**** web.Dev Notes *****/

1. Welcome to learn CSS 
2. Box model
    -> Every thing displayed by CSS is a box model.
    -> Extrinsic sizing vs intrinsic sizing 
    -> Extrinsic sizing : When the CSS element box is having the specified width , its extrinsically sized.
       It means the size explicitly defined for an element using properties like width and height.
       Means element takes on a specified size regardless of its content, essentially setting the size,
       based on the external factors w/o considering its content size.
    -> intrinsic sizing : 
       For example if content size is over flowing width wise, we can give width property of 
       width : min-content. ( So, it tells the box to take minimum intrinsic size)
    
    -> Intrinsic size : its the size of an element purely based on its content without taking into 
       account the effects of the context in which it is displayed. 
       * Intrinsic size are represent by min-content and max-content 
       * The inline-size of CSS property defines the height and width of the an element's block.

       * min-content -> Gives minimum intrinsic size to the element
                     -> The minimum size the content would take inside a container with an inline-size of 0 px.
                     -> So, that minimum size would be the length of the longest word or longest child content in it.
                     -> Smallest size of the box , which can take the element's content w/o overflow

       * max-content -> Its the opposite of the min-content
                     -> max-size the content would take inside a container with an inline size of infinite value

       * fit-content -> ( H.W.)

       ** min-content -> Smallest size a box could take that does not lead to overflow , that could be avoided
                       by choosing the larger size box.
      ** max-content -> A box's ideal size when given infinite space available. Usually this is the smallest
                        size the box could take in that axis while fitting around its content i.e. minimizing 
                        unfilled space

    -> Extrinsic sizing gives developer more control, on the other hand intrinsic sizing gives the content
       more control.

    -> # Overflow happens when content is too big for the box it's in. You can manage how the element 
         handles the overflow content using overflow property #
    
    -> w.r.to Height 
    Scenario	            min-content	                                    max-content
    Text Content	         Shrinks height by wrapping lines tightly	      Grows height to avoid wrapping lines
    Non-Breakable Content	Shrinks to the natural size of the content	   Expands to the natural size of the content
    Overflow	            No overflow; height adjusts tightly	            Can cause height overflow(?? gpt)

    -> Content Box -> Padding Box -> Border Box --> Margin Box

    -> Content box : the area where the content lives. the content can control the size of its parent.
    -> Padding : surrounds the content and its inside the content box. If the box has overflow rules 
                 the scroll bars also occupies this space.
    -> Margin  :  outside of the border area.

    ->CSS uses default box-sizing : content-box , so if i give width it will appy to content box only
                       box-sizing : border-box , so If i give width it will apply to content ( border and 
                       padding will move inside , inclusive of it )


   --->>>>>>>>>>>><<<<<<<<<<<<<-------
   In CSS, "min-content" refers to the smallest possible size an element 
   can be without causing any content overflow,

   Essentially the width of its longest word or fixed-size element.
   
   While "max-content" represents the ideal size an element would take if given unlimited space,
   Allowing it to expand to fit its full content without wrapping or shrinking;
   Essentially, "min-content" makes an element as small as possible,
   While "max-content" lets it expand to its natural size based on its content

3. Selectors 
      -> /universal , type , class , id , attribute , Grouping selector , complex selector and compound 
      selector
   
      -> Universal selector ( * )
       It is also known as wildcard , it applies to every element on the webpage.

      -> Type selector 
       a type selector matches a HTML element and applies the style accordingly

      -> Class selector : For this to work we need to give class attribute to the HTML element
          .my-sample-class {
            color : red;
          }

          Note : A HTML element can have multiple classes defined in the attribute
          Note : You can not start a ID or class name with a number.

      ->ID selector : For this to work we need to give id attribute to the HTML element
        #my-sample-id {
           color : red;
        } 
      
      ->Attribute selector : 
        <div data-type="primary"></div>

        [data-type = 'primary']{
         color : red;
        }

        If we simply want to apply to data-type Attribute

        [data-type ]{
         color : red;
        }

      -> Grouping selector : we can apply same styling to multiple HTML elements using different type of 
        selector at once.

        strong,
        em,
        .class-selector,
        [data-type]{
         color : red
        }
      
      -> Pseudo Classes and elements

            -> Pseudo-class , we use : 
            -> Pseudo-elements , we use :: 

      -> Complex selectors  : This will apply to styling to all the p tag inside my div.

      div p{

      }   

      -> Compound selector : <a class="my-class"> </a>

      a.my-class{
         color : red;
      }